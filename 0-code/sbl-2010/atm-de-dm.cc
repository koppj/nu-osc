/**********************************
 * using 2dim table for atm chisq *
 **********************************/

#include "definitions.h"

#define N_DE 101
#define D_DE 0.002
#define DE_MAX 0.2

#define N_DM 31
#define D_DM 0.005
#define DM_MAX 0.15


double table[N_DE][N_DM];

void read_table(void)
{
  FILE *fp = fopen(PATH"/Data-files/atm-data-de-dm.dat","r");

  for(int i = 0; i < N_DE; i++){
    for(int j = 0; j < N_DM; j++){

      if(fscanf(fp, "%*e %*e %le", &table[i][j]) != 1){
	fprintf(stderr, "error in reading atm table\n");
	exit(1);
      }
    }
  }
  return;
}

double chi2minos(params p);

double chi2atm(params p)
{
  static bool first = true;
  if(first){
    first = false;
    read_table();
  }

  const double dm = sqr(p.Um[I4]) + sqr(p.Um[I5]);
  const double de = sqr(p.Ue[I4]) + sqr(p.Ue[I5]);

  if(de >= DE_MAX)
    return 1.e6 * (1. + sqr(de - DE_MAX));
  if(dm >= DM_MAX)
    return 1.e6 * (1. + sqr(dm - DM_MAX));

  // interpolation on the table
  const int i_e = int(de/D_DE);  
  const int i_m = int(dm/D_DM);

  const double z1 = table[i_e][i_m] + 
    (table[i_e+1][i_m] - table[i_e][i_m]) * (de - i_e * D_DE) / D_DE;  
  const double z2 = table[i_e][i_m+1] + 
    (table[i_e+1][i_m+1] - table[i_e][i_m+1]) * (de - i_e * D_DE) / D_DE;

  const double chisq_atm = z1 + (z2 - z1) * (dm - i_m * D_DM) / D_DM;
  
#ifdef MINOS_NC
  return chisq_atm + chi2minos(p);
#else
  return chisq_atm;
#endif  
}



/**********************************
 * chisq from MINOS NC data
 **********************************
 * 
 * data generated by Joachim on 10-03-11
 * table of MINOS NC fit in dmq41 and Um4^2
 * use minos data only in the range 0.1 < dmq < 1
 * since then the approx dmq=0 for ND and dmq=inf for FD is good
 */


double chi2minos(params p)
{
  double dmu = 0.;
  
  const double min = read(PATH"/Data-files/minos-NC-dmu_dmq0.3eVq.dat", -4.);
  bool use_minos = false;
  
  if(p.dmq[I4] > 0.1 && p.dmq[I4] < 1.){
    dmu = sqr(p.Um[I4]);
    use_minos = true;
  }
  if(p.dmq[I5] > 0.1 && p.dmq[I5] < 1.){
    dmu += sqr(p.Um[I5]);
    use_minos = true;
  }
  
  if(use_minos){
    if(dmu < 1.e-4) return 0.;
    if(dmu > 0.3) return 1.e6 * (1. + dmu);
    return read(PATH"/Data-files/minos-NC-dmu_dmq0.3eVq.dat", log10(dmu)) - min;
  }
  
  return 0.;
}
  
  
  


